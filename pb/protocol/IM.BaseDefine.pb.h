// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eBaseDefine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eBaseDefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eBaseDefine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eBaseDefine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IM {
namespace BaseDefine {
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace BaseDefine
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::BaseDefine::UserInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace BaseDefine {

enum ServiceID : int {
  SID_NULL = 0,
  SID_LOGIN = 1,
  SID_MSG = 2,
  SID_OTHER = 3,
  ServiceID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServiceID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServiceID_IsValid(int value);
constexpr ServiceID ServiceID_MIN = SID_NULL;
constexpr ServiceID ServiceID_MAX = SID_OTHER;
constexpr int ServiceID_ARRAYSIZE = ServiceID_MAX + 1;

const std::string& ServiceID_Name(ServiceID value);
template<typename T>
inline const std::string& ServiceID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceID_Name.");
  return ServiceID_Name(static_cast<ServiceID>(enum_t_value));
}
bool ServiceID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceID* value);
enum LoginCmdID : int {
  CID_NULL = 0,
  CID_LOGIN_REQ_REGIST = 257,
  CID_LOGIN_RES_REGIST = 258,
  LoginCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginCmdID_IsValid(int value);
constexpr LoginCmdID LoginCmdID_MIN = CID_NULL;
constexpr LoginCmdID LoginCmdID_MAX = CID_LOGIN_RES_REGIST;
constexpr int LoginCmdID_ARRAYSIZE = LoginCmdID_MAX + 1;

const std::string& LoginCmdID_Name(LoginCmdID value);
template<typename T>
inline const std::string& LoginCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginCmdID_Name.");
  return LoginCmdID_Name(static_cast<LoginCmdID>(enum_t_value));
}
bool LoginCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginCmdID* value);
enum ResultType : int {
  REFUSE_REASON_NONE = 0,
  REFUSE_REASON_VERSION_TOO_OLD = 1,
  ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResultType_IsValid(int value);
constexpr ResultType ResultType_MIN = REFUSE_REASON_NONE;
constexpr ResultType ResultType_MAX = REFUSE_REASON_VERSION_TOO_OLD;
constexpr int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const std::string& ResultType_Name(ResultType value);
template<typename T>
inline const std::string& ResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResultType_Name.");
  return ResultType_Name(static_cast<ResultType>(enum_t_value));
}
bool ResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResultType* value);
// ===================================================================

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit constexpr UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return new UserInfo();
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNickNameFieldNumber = 3,
    kAvatarUrlFieldNumber = 4,
    kEmailFieldNumber = 6,
    kUserRealNameFieldNumber = 7,
    kUserTelFieldNumber = 8,
    kUserDomainFieldNumber = 9,
    kSignInfoFieldNumber = 11,
    kUserIdFieldNumber = 1,
    kUserGenderFieldNumber = 2,
    kDepartmentIdFieldNumber = 5,
    kStatusFieldNumber = 10,
  };
  // string user_nick_name = 3;
  void clear_user_nick_name();
  const std::string& user_nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_nick_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_nick_name();
  void set_allocated_user_nick_name(std::string* user_nick_name);
  private:
  const std::string& _internal_user_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_nick_name(const std::string& value);
  std::string* _internal_mutable_user_nick_name();
  public:

  // string avatar_url = 4;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // string email = 6;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string user_real_name = 7;
  void clear_user_real_name();
  const std::string& user_real_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_real_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_real_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_real_name();
  void set_allocated_user_real_name(std::string* user_real_name);
  private:
  const std::string& _internal_user_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_real_name(const std::string& value);
  std::string* _internal_mutable_user_real_name();
  public:

  // string user_tel = 8;
  void clear_user_tel();
  const std::string& user_tel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_tel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_tel();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_tel();
  void set_allocated_user_tel(std::string* user_tel);
  private:
  const std::string& _internal_user_tel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_tel(const std::string& value);
  std::string* _internal_mutable_user_tel();
  public:

  // string user_domain = 9;
  void clear_user_domain();
  const std::string& user_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_domain();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_domain();
  void set_allocated_user_domain(std::string* user_domain);
  private:
  const std::string& _internal_user_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_domain(const std::string& value);
  std::string* _internal_mutable_user_domain();
  public:

  // string sign_info = 11;
  void clear_sign_info();
  const std::string& sign_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_sign_info();
  void set_allocated_sign_info(std::string* sign_info);
  private:
  const std::string& _internal_sign_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign_info(const std::string& value);
  std::string* _internal_mutable_sign_info();
  public:

  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 user_gender = 2;
  void clear_user_gender();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_gender() const;
  void set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_gender() const;
  void _internal_set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 department_id = 5;
  void clear_department_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 department_id() const;
  void set_department_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_department_id() const;
  void _internal_set_department_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 10;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_real_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_gender_;
  ::PROTOBUF_NAMESPACE_ID::uint32 department_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// uint32 user_id = 1;
inline void UserInfo::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_id)
  return _internal_user_id();
}
inline void UserInfo::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void UserInfo::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_id)
}

// uint32 user_gender = 2;
inline void UserInfo::clear_user_gender() {
  user_gender_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_user_gender() const {
  return user_gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_gender)
  return _internal_user_gender();
}
inline void UserInfo::_internal_set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_gender_ = value;
}
inline void UserInfo::set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_gender(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_gender)
}

// string user_nick_name = 3;
inline void UserInfo::clear_user_nick_name() {
  user_nick_name_.ClearToEmpty();
}
inline const std::string& UserInfo::user_nick_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_nick_name)
  return _internal_user_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_user_nick_name(ArgT0&& arg0, ArgT... args) {
 
 user_nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_nick_name)
}
inline std::string* UserInfo::mutable_user_nick_name() {
  std::string* _s = _internal_mutable_user_nick_name();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_nick_name)
  return _s;
}
inline const std::string& UserInfo::_internal_user_nick_name() const {
  return user_nick_name_.Get();
}
inline void UserInfo::_internal_set_user_nick_name(const std::string& value) {
  
  user_nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_user_nick_name() {
  
  return user_nick_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_user_nick_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_nick_name)
  return user_nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_user_nick_name(std::string* user_nick_name) {
  if (user_nick_name != nullptr) {
    
  } else {
    
  }
  user_nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_nick_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_nick_name)
}

// string avatar_url = 4;
inline void UserInfo::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
}
inline const std::string& UserInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.avatar_url)
}
inline std::string* UserInfo::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.avatar_url)
  return _s;
}
inline const std::string& UserInfo::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void UserInfo::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.avatar_url)
}

// uint32 department_id = 5;
inline void UserInfo::clear_department_id() {
  department_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_department_id() const {
  return department_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::department_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.department_id)
  return _internal_department_id();
}
inline void UserInfo::_internal_set_department_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  department_id_ = value;
}
inline void UserInfo::set_department_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_department_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.department_id)
}

// string email = 6;
inline void UserInfo::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.email)
}
inline std::string* UserInfo::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.email)
  return _s;
}
inline const std::string& UserInfo::_internal_email() const {
  return email_.Get();
}
inline void UserInfo::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.email)
}

// string user_real_name = 7;
inline void UserInfo::clear_user_real_name() {
  user_real_name_.ClearToEmpty();
}
inline const std::string& UserInfo::user_real_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_real_name)
  return _internal_user_real_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_user_real_name(ArgT0&& arg0, ArgT... args) {
 
 user_real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_real_name)
}
inline std::string* UserInfo::mutable_user_real_name() {
  std::string* _s = _internal_mutable_user_real_name();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_real_name)
  return _s;
}
inline const std::string& UserInfo::_internal_user_real_name() const {
  return user_real_name_.Get();
}
inline void UserInfo::_internal_set_user_real_name(const std::string& value) {
  
  user_real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_user_real_name() {
  
  return user_real_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_user_real_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_real_name)
  return user_real_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_user_real_name(std::string* user_real_name) {
  if (user_real_name != nullptr) {
    
  } else {
    
  }
  user_real_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_real_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_real_name)
}

// string user_tel = 8;
inline void UserInfo::clear_user_tel() {
  user_tel_.ClearToEmpty();
}
inline const std::string& UserInfo::user_tel() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_tel)
  return _internal_user_tel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_user_tel(ArgT0&& arg0, ArgT... args) {
 
 user_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_tel)
}
inline std::string* UserInfo::mutable_user_tel() {
  std::string* _s = _internal_mutable_user_tel();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_tel)
  return _s;
}
inline const std::string& UserInfo::_internal_user_tel() const {
  return user_tel_.Get();
}
inline void UserInfo::_internal_set_user_tel(const std::string& value) {
  
  user_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_user_tel() {
  
  return user_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_user_tel() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_tel)
  return user_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_user_tel(std::string* user_tel) {
  if (user_tel != nullptr) {
    
  } else {
    
  }
  user_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_tel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_tel)
}

// string user_domain = 9;
inline void UserInfo::clear_user_domain() {
  user_domain_.ClearToEmpty();
}
inline const std::string& UserInfo::user_domain() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_domain)
  return _internal_user_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_user_domain(ArgT0&& arg0, ArgT... args) {
 
 user_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_domain)
}
inline std::string* UserInfo::mutable_user_domain() {
  std::string* _s = _internal_mutable_user_domain();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_domain)
  return _s;
}
inline const std::string& UserInfo::_internal_user_domain() const {
  return user_domain_.Get();
}
inline void UserInfo::_internal_set_user_domain(const std::string& value) {
  
  user_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_user_domain() {
  
  return user_domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_user_domain() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_domain)
  return user_domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_user_domain(std::string* user_domain) {
  if (user_domain != nullptr) {
    
  } else {
    
  }
  user_domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_domain,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_domain)
}

// uint32 status = 10;
inline void UserInfo::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.status)
  return _internal_status();
}
inline void UserInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void UserInfo::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.status)
}

// string sign_info = 11;
inline void UserInfo::clear_sign_info() {
  sign_info_.ClearToEmpty();
}
inline const std::string& UserInfo::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.sign_info)
  return _internal_sign_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_sign_info(ArgT0&& arg0, ArgT... args) {
 
 sign_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.sign_info)
}
inline std::string* UserInfo::mutable_sign_info() {
  std::string* _s = _internal_mutable_sign_info();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.sign_info)
  return _s;
}
inline const std::string& UserInfo::_internal_sign_info() const {
  return sign_info_.Get();
}
inline void UserInfo::_internal_set_sign_info(const std::string& value) {
  
  sign_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_sign_info() {
  
  return sign_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.sign_info)
  return sign_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_sign_info(std::string* sign_info) {
  if (sign_info != nullptr) {
    
  } else {
    
  }
  sign_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.sign_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace BaseDefine
}  // namespace IM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::IM::BaseDefine::ServiceID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::LoginCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::ResultType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eBaseDefine_2eproto
